Token: SEPARATOR           Lexeme: #
Token: KEYWORD             Lexeme: int
Token: IDENTIFIER          Lexeme: i
Token: SEPARATOR           Lexeme: ,
Token: IDENTIFIER          Lexeme: max
Token: SEPARATOR           Lexeme: ,
Token: IDENTIFIER          Lexeme: sum
Token: SEPARATOR           Lexeme: ;
Token: SEPARATOR           Lexeme: #
Token: IDENTIFIER          Lexeme: sum
Token: OPERATOR            Lexeme: =
Token: INTEGER             Lexeme: 0
Token: SEPARATOR           Lexeme: ;
Token: IDENTIFIER          Lexeme: i
Token: OPERATOR            Lexeme: =
Token: INTEGER             Lexeme: 1
Token: SEPARATOR           Lexeme: ;
Token: KEYWORD             Lexeme: get
Token: SEPARATOR           Lexeme: (
Token: IDENTIFIER          Lexeme: max
Token: SEPARATOR           Lexeme: )
Token: SEPARATOR           Lexeme: ;
Token: KEYWORD             Lexeme: while
Token: SEPARATOR           Lexeme: (
Token: IDENTIFIER          Lexeme: i
Token: OPERATOR            Lexeme: <
Token: IDENTIFIER          Lexeme: max
Token: SEPARATOR           Lexeme: )
Token: SEPARATOR           Lexeme: {
Token: IDENTIFIER          Lexeme: sum
Token: OPERATOR            Lexeme: =
Token: IDENTIFIER          Lexeme: sum
Token: OPERATOR            Lexeme: +
Token: IDENTIFIER          Lexeme: i
Token: SEPARATOR           Lexeme: ;
Token: IDENTIFIER          Lexeme: i
Token: OPERATOR            Lexeme: =
Token: IDENTIFIER          Lexeme: i
Token: OPERATOR            Lexeme: +
Token: INTEGER             Lexeme: 1
Token: SEPARATOR           Lexeme: ;
Token: SEPARATOR           Lexeme: }
Token: KEYWORD             Lexeme: endwhile
Token: KEYWORD             Lexeme: put
Token: SEPARATOR           Lexeme: (
Token: IDENTIFIER          Lexeme: sum
Token: OPERATOR            Lexeme: +
Token: IDENTIFIER          Lexeme: max
Token: SEPARATOR           Lexeme: )
Token: SEPARATOR           Lexeme: ;
