Token: SEPARATOR           Lexeme: #
Token: IDENTIFIER          Lexeme: INT
Token: IDENTIFIER          Lexeme: num
Token: SEPARATOR           Lexeme: ,
Token: IDENTIFIER          Lexeme: num1
Token: SEPARATOR           Lexeme: ,
Token: IDENTIFIER          Lexeme: num2
Token: SEPARATOR           Lexeme: ;
Token: IDENTIFIER          Lexeme: BOOL
Token: IDENTIFIER          Lexeme: hello
Token: SEPARATOR           Lexeme: ,
Token: IDENTIFIER          Lexeme: world
Token: SEPARATOR           Lexeme: ;
Token: SEPARATOR           Lexeme: #
Token: KEYWORD             Lexeme: if
Token: SEPARATOR           Lexeme: (
Token: IDENTIFIER          Lexeme: num
Token: OPERATOR            Lexeme: !=
Token: IDENTIFIER          Lexeme: num2
Token: SEPARATOR           Lexeme: )
Token: SEPARATOR           Lexeme: {
Token: KEYWORD             Lexeme: if
Token: SEPARATOR           Lexeme: (
Token: IDENTIFIER          Lexeme: num2
Token: OPERATOR            Lexeme: !=
Token: IDENTIFIER          Lexeme: num1
Token: SEPARATOR           Lexeme: )
Token: SEPARATOR           Lexeme: {
Token: IDENTIFIER          Lexeme: num2
Token: OPERATOR            Lexeme: =
Token: IDENTIFIER          Lexeme: num1
Token: SEPARATOR           Lexeme: ;
Token: SEPARATOR           Lexeme: }
Token: KEYWORD             Lexeme: else
Token: SEPARATOR           Lexeme: {
Token: IDENTIFIER          Lexeme: num1
Token: OPERATOR            Lexeme: =
Token: IDENTIFIER          Lexeme: num2
Token: SEPARATOR           Lexeme: ;
Token: SEPARATOR           Lexeme: }
Token: KEYWORD             Lexeme: fi
Token: SEPARATOR           Lexeme: }
Token: KEYWORD             Lexeme: else
Token: SEPARATOR           Lexeme: {
Syntax Error: Invalid token type, Found token type 'SEPARATOR' 
Expected token type 'KEYWORD' 
Expected lexeme: 'while' 
(Found Lexeme: '}')
